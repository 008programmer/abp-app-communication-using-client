// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Prabh.Stock.Books;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Prabh.Stock.Books;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IStockAppService), typeof(StockClientProxy))]
public partial class StockClientProxy : ClientProxyBase<IStockAppService>, IStockAppService
{
    public virtual async Task<PagedResultDto<StockDto>> GetThisMonthTopStocksAsync()
    {
        return await RequestAsync<PagedResultDto<StockDto>>(nameof(GetThisMonthTopStocksAsync));
    }

    public virtual async Task<StockDto> CreateAsync(CreateUpdateStockDto input)
    {
        return await RequestAsync<StockDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdateStockDto), input }
        });
    }

    public virtual async Task<StockDto> UpdateAsync(Guid id, CreateUpdateStockDto input)
    {
        return await RequestAsync<StockDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CreateUpdateStockDto), input }
        });
    }

    public virtual async Task<StockDto> GetAsync(Guid id)
    {
        return await RequestAsync<StockDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<StockDto>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<StockDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
