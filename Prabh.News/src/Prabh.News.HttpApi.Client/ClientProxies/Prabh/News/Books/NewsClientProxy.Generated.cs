// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Prabh.News.Books;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Prabh.News.Books;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(INewsAppService), typeof(NewsClientProxy))]
public partial class NewsClientProxy : ClientProxyBase<INewsAppService>, INewsAppService
{
    public virtual async Task<PagedResultDto<NewsDto>> GetTopMonthlyNewsAsync()
    {
        return await RequestAsync<PagedResultDto<NewsDto>>(nameof(GetTopMonthlyNewsAsync));
    }

    public virtual async Task<NewsDto> CreateAsync(CreateUpdateNewsDto input)
    {
        return await RequestAsync<NewsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdateNewsDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<NewsDto> GetAsync(Guid id)
    {
        return await RequestAsync<NewsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<NewsDto>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<NewsDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<NewsDto> UpdateAsync(Guid id, CreateUpdateNewsDto input)
    {
        return await RequestAsync<NewsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CreateUpdateNewsDto), input }
        });
    }
}
